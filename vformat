#!/usr/bin/perl -w
use 5.010;
use File::Basename;
use utf8;
binmode(STDOUT,":encoding(gbk)");
print "Beginning to process ... \n";
print "CMD Format---fv in.v---- \n";
my $filename;
my $outfilename;

#-----delete the first input character when it including the "/" or "." and so on.
$_=$ARGV[0];
##s/\/\s*$//g; ## delete the "/" when the character including the "/"
s/\W+\s*$//g; ## delete the "/" when the character including the "/" or "." and so on
$filename = $_;
$outfilename=$filename."format";
print "$filename \n"; 
print "$outfilename \n"; 
my $basename = basename($filename,".v");

#----------------------------------------------------------
#测试文件存在
#die "文件$filename不存在！\n" unless -e $filename;
die "file $filename is not exist! \n" unless -e $filename;
#打开文件
open(VFILE,"<",$filename) || die "open file failed!\n";
open(OFILE,">",$outfilename) || die "open file failed!\n";
#----------------------------------------------------------
#对文件预处理,begin...end if...else if...begin等在一行的改成两行
my $last_line = "";
while(<VFILE>){
	chomp;#去除行尾的\n
  # $1 means match (.*if.*)'s words
  # $2 means match (.*begin.*)'s words
  # such as "if (a == 3 ) begin" , so $1 = if ( a==3 ), $2 = begin
  if(/^\s*\/\//i){
		$_ =~ s/^\s+//;
		push @content,$_;
		$last_line = $_;
  }
  elsif(/(.*if.*)(begin.*)/i){
		push @content,$1;
		push @content,$2;
		$last_line = $2;
	}
	elsif(/(.*begin.*)(if.*)/i){
		push @content,$1;
		push @content,$2;
		$last_line = $2;
	}
	elsif(/(.*else.*)(begin.*)/i){
		push @content,$1;
		push @content,$2;
		$last_line = $2;
	}
	elsif(/(.*\).*)(begin.*)/i){
		push @content,$1;
		push @content,$2;
		$last_line = $2;
	}
	elsif(/(.*generate.*)(begin.*)/i){
		push @content,$1;
		push @content,$2;
		$last_line = $2;
	}
	elsif(/^\s*$/){#空行
		#delete only space line
	}
	else{
		push @content,$_;
		$last_line = $_;
	}
}

#----------------------------------------------------------
#变量定义
$begin_cnt = 0;
$autoindent_space = " "x2;#自动缩进的空格数（Tab宽度）
$last_line = "";
#模块定义开始
#$module_def_start = 0;
my $module_cnt = 0;
my $key_generate=0;
#my $key_begin=0;


#==========================================================
#读取并处理文件
foreach (@content){
	$line = $_;
  ##1) process line
  if(/^\s*\/\//i){# match//
		my $tmp_space = $autoindent_space x 0; 
		$line =~ s/^\s+/$tmp_space/;
  }elsif(/\s*\b(module|endmodule|initial|generate|endgenerate)\b/i){# match "module" or "endmodule" or ...
		my $tmp_space = $autoindent_space x 0; 
		$line =~ s/^\s+/$tmp_space/;
    $begin_cnt = 1;
    if(/\b(generate)\b/i){
      $key_generate = 1;
    }
    elsif(/\b(endgenerate)\b/i){
      $key_generate = 0;
    }
	}elsif(/\b(end|endcase)\b/i){#matchend
    #$key_begin=0;
		$begin_cnt>0 && $begin_cnt--;
		my $tmp_space = $autoindent_space x ($begin_cnt);
		$line =~ s/^\s*/$tmp_space/;
	}elsif(/\b(begin|case)\b/i){#matchbegin
    #$key_begin=1;
    if($last_line =~ /^\s*if/i){
		  $begin_cnt>0 && $begin_cnt--;
    }elsif($last_line =~ /^\s*else/i){
		  $begin_cnt>0 && $begin_cnt--;
    }elsif($last_line =~ /^\s*always/i){
		  $begin_cnt>0 && $begin_cnt--;
    }
		my $tmp_space = $autoindent_space x $begin_cnt;
		$line =~ s/^\s*/$tmp_space/;
		$begin_cnt++;
	}elsif(/\belse\s*/i){#match else "melse"
    if($last_line =~ /\b(end|endcase)\b/i){#matchend
		  my $tmp_space = $autoindent_space x $begin_cnt;
		  $line =~ s/^\s*/$tmp_space/;
		  $begin_cnt++;
    }else{
		  $begin_cnt>0 && $begin_cnt--;
		  my $tmp_space = $autoindent_space x $begin_cnt;
		  $line =~ s/^\s*/$tmp_space/;
		  $begin_cnt++;
    }
	}elsif(/if\s*\(/i){#matchif
		my $tmp_space = $autoindent_space x $begin_cnt;
		$line =~ s/^\s*/$tmp_space/;
		$begin_cnt++;
	}elsif(/\b(always)\b/){#match always "malways"
    if($key_generate ==0){
		  my $tmp_space = $autoindent_space x 0; 
		  $line =~ s/^\s*/$tmp_space/;
      $begin_cnt=1;
    }else{
		  my $tmp_space = $autoindent_space x $begin_cnt;
		  $line =~ s/^\s*/$tmp_space/;
		  $begin_cnt++;
    }
	}elsif(/\)\s*\;/i){#match ");" "match);"
    if(/\=/i){
		  my $tmp_space = $autoindent_space x $begin_cnt;
		  $line =~ s/^\s*/$tmp_space/;
    }
    elsif($begin_cnt > 0){
		  $begin_cnt>0 && $begin_cnt--;
		  my $tmp_space = $autoindent_space x $begin_cnt;
		  $line =~ s/^\s*/$tmp_space/;
    }
    elsif($key_generate ==0){
		  my $tmp_space = $autoindent_space x 0; 
		  $line =~ s/^\s*/$tmp_space/;
      $begin_cnt=0;
    }else{
		  my $tmp_space = $autoindent_space x $begin_cnt;
		  $line =~ s/^\s*/$tmp_space/;
    }
  }elsif(/^\s*\./i){
    if($last_line =~ /^\s*\./i){
		  my $tmp_space = $autoindent_space x $begin_cnt;
		  $line =~ s/^\s*/$tmp_space/;
    }elsif($last_line =~ /^\s*\/\//i){# match//
		  my $tmp_space = $autoindent_space x $begin_cnt;
		  $line =~ s/^\s*/$tmp_space/;
    }else{
		  $begin_cnt++;
		  my $tmp_space = $autoindent_space x $begin_cnt;
		  $line =~ s/^\s*/$tmp_space/;
    }
  }else{
    if($last_line =~ /^\s*\./i){
		  $begin_cnt>0 && $begin_cnt--;
      my $tmp_space = $autoindent_space x $begin_cnt;
	    $line =~ s/^\s*/$tmp_space/;
      #}elsif($last_line =~ /(?!;)/i){#no match;
      #}emy $tmp_space = $autoindent_space x $begin_cnt;
	    #}e$line = $_;
    }else{
      my $tmp_space = $autoindent_space x $begin_cnt;
	    $line =~ s/^\s*/$tmp_space/;
    }
  }
  undef $tmp_space;
	$last_line = $line;
	$text.=$line."\n";
}

#关闭文件
close VFILE;
select OFILE;
print $text;
close OFILE;
select STDOUT;
print "-"x40,"\n"."Ending ,output file to --> $outfilename\n";
